-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Aisf.Mutation exposing (CreateChampionRequiredArguments, CreateEventOptionalArguments, CreateEventRequiredArguments, CreateRecordRequiredArguments, DeleteChampionRequiredArguments, UpdateChampionMedalsRequiredArguments, UpdateChampionPicturesRequiredArguments, UpdateChampionPresentationOptionalArguments, UpdateChampionPresentationRequiredArguments, UpdateChampionPrivateInfoOptionalArguments, UpdateChampionPrivateInfoRequiredArguments, UpdateChampionProfessionalCareerOptionalArguments, UpdateChampionProfessionalCareerRequiredArguments, UpdateChampionSportCareerOptionalArguments, UpdateChampionSportCareerRequiredArguments, createChampion, createEvent, createRecord, deleteChampion, updateChampionMedals, updateChampionPictures, updateChampionPresentation, updateChampionPrivateInfo, updateChampionProfessionalCareer, updateChampionSportCareer)

import Aisf.InputObject
import Aisf.Interface
import Aisf.Object
import Aisf.Scalar
import Aisf.ScalarCodecs
import Aisf.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias CreateChampionRequiredArguments =
    { firstName : String
    , isMember : Bool
    , lastName : String
    , sport : String
    }


createChampion : CreateChampionRequiredArguments -> SelectionSet decodesTo Aisf.Object.Champion -> SelectionSet (Maybe decodesTo) RootMutation
createChampion requiredArgs object_ =
    Object.selectionForCompositeField "createChampion" [ Argument.required "firstName" requiredArgs.firstName Encode.string, Argument.required "isMember" requiredArgs.isMember Encode.bool, Argument.required "lastName" requiredArgs.lastName Encode.string, Argument.required "sport" requiredArgs.sport Encode.string ] object_ (identity >> Decode.nullable)


type alias CreateEventOptionalArguments =
    { sport : OptionalArgument String }


type alias CreateEventRequiredArguments =
    { competition : String
    , place : String
    , year : Int
    }


createEvent : (CreateEventOptionalArguments -> CreateEventOptionalArguments) -> CreateEventRequiredArguments -> SelectionSet decodesTo Aisf.Object.Event -> SelectionSet decodesTo RootMutation
createEvent fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { sport = Absent }

        optionalArgs =
            [ Argument.optional "sport" filledInOptionals.sport Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "createEvent" (optionalArgs ++ [ Argument.required "competition" requiredArgs.competition Encode.string, Argument.required "place" requiredArgs.place Encode.string, Argument.required "year" requiredArgs.year Encode.int ]) object_ identity


type alias CreateRecordRequiredArguments =
    { place : String
    , recordType : Int
    , specialty : String
    , winners : List Aisf.InputObject.WinnerParams
    , year : Int
    }


createRecord : CreateRecordRequiredArguments -> SelectionSet decodesTo Aisf.Object.Record -> SelectionSet decodesTo RootMutation
createRecord requiredArgs object_ =
    Object.selectionForCompositeField "createRecord" [ Argument.required "place" requiredArgs.place Encode.string, Argument.required "recordType" requiredArgs.recordType Encode.int, Argument.required "specialty" requiredArgs.specialty Encode.string, Argument.required "winners" requiredArgs.winners (Aisf.InputObject.encodeWinnerParams |> Encode.list), Argument.required "year" requiredArgs.year Encode.int ] object_ identity


type alias DeleteChampionRequiredArguments =
    { id : String }


deleteChampion : DeleteChampionRequiredArguments -> SelectionSet (Maybe Bool) RootMutation
deleteChampion requiredArgs =
    Object.selectionForField "(Maybe Bool)" "deleteChampion" [ Argument.required "id" requiredArgs.id Encode.string ] (Decode.bool |> Decode.nullable)


type alias UpdateChampionMedalsRequiredArguments =
    { id : String
    , medals : List Aisf.InputObject.MedalParams
    }


updateChampionMedals : UpdateChampionMedalsRequiredArguments -> SelectionSet decodesTo Aisf.Object.Champion -> SelectionSet (Maybe decodesTo) RootMutation
updateChampionMedals requiredArgs object_ =
    Object.selectionForCompositeField "updateChampionMedals" [ Argument.required "id" requiredArgs.id Encode.string, Argument.required "medals" requiredArgs.medals (Aisf.InputObject.encodeMedalParams |> Encode.list) ] object_ (identity >> Decode.nullable)


type alias UpdateChampionPicturesRequiredArguments =
    { id : String
    , pictures : List Aisf.InputObject.PictureParams
    }


updateChampionPictures : UpdateChampionPicturesRequiredArguments -> SelectionSet decodesTo Aisf.Object.Champion -> SelectionSet (Maybe decodesTo) RootMutation
updateChampionPictures requiredArgs object_ =
    Object.selectionForCompositeField "updateChampionPictures" [ Argument.required "id" requiredArgs.id Encode.string, Argument.required "pictures" requiredArgs.pictures (Aisf.InputObject.encodePictureParams |> Encode.list) ] object_ (identity >> Decode.nullable)


type alias UpdateChampionPresentationOptionalArguments =
    { intro : OptionalArgument String
    , profilePicture : OptionalArgument Aisf.InputObject.FileParams
    }


type alias UpdateChampionPresentationRequiredArguments =
    { firstName : String
    , highlights : List String
    , id : String
    , isMember : Bool
    , lastName : String
    , sport : String
    }


updateChampionPresentation : (UpdateChampionPresentationOptionalArguments -> UpdateChampionPresentationOptionalArguments) -> UpdateChampionPresentationRequiredArguments -> SelectionSet decodesTo Aisf.Object.Champion -> SelectionSet (Maybe decodesTo) RootMutation
updateChampionPresentation fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { intro = Absent, profilePicture = Absent }

        optionalArgs =
            [ Argument.optional "intro" filledInOptionals.intro Encode.string, Argument.optional "profilePicture" filledInOptionals.profilePicture Aisf.InputObject.encodeFileParams ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateChampionPresentation" (optionalArgs ++ [ Argument.required "firstName" requiredArgs.firstName Encode.string, Argument.required "highlights" requiredArgs.highlights (Encode.string |> Encode.list), Argument.required "id" requiredArgs.id Encode.string, Argument.required "isMember" requiredArgs.isMember Encode.bool, Argument.required "lastName" requiredArgs.lastName Encode.string, Argument.required "sport" requiredArgs.sport Encode.string ]) object_ (identity >> Decode.nullable)


type alias UpdateChampionPrivateInfoOptionalArguments =
    { address : OptionalArgument String
    , birthDate : OptionalArgument String
    , email : OptionalArgument String
    , phoneNumber : OptionalArgument String
    }


type alias UpdateChampionPrivateInfoRequiredArguments =
    { id : String }


updateChampionPrivateInfo : (UpdateChampionPrivateInfoOptionalArguments -> UpdateChampionPrivateInfoOptionalArguments) -> UpdateChampionPrivateInfoRequiredArguments -> SelectionSet decodesTo Aisf.Object.Champion -> SelectionSet (Maybe decodesTo) RootMutation
updateChampionPrivateInfo fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { address = Absent, birthDate = Absent, email = Absent, phoneNumber = Absent }

        optionalArgs =
            [ Argument.optional "address" filledInOptionals.address Encode.string, Argument.optional "birthDate" filledInOptionals.birthDate Encode.string, Argument.optional "email" filledInOptionals.email Encode.string, Argument.optional "phoneNumber" filledInOptionals.phoneNumber Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateChampionPrivateInfo" (optionalArgs ++ [ Argument.required "id" requiredArgs.id Encode.string ]) object_ (identity >> Decode.nullable)


type alias UpdateChampionProfessionalCareerOptionalArguments =
    { background : OptionalArgument String
    , volunteering : OptionalArgument String
    }


type alias UpdateChampionProfessionalCareerRequiredArguments =
    { id : String
    , proExperiences : List Aisf.InputObject.ProExperienceParams
    }


updateChampionProfessionalCareer : (UpdateChampionProfessionalCareerOptionalArguments -> UpdateChampionProfessionalCareerOptionalArguments) -> UpdateChampionProfessionalCareerRequiredArguments -> SelectionSet decodesTo Aisf.Object.Champion -> SelectionSet (Maybe decodesTo) RootMutation
updateChampionProfessionalCareer fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { background = Absent, volunteering = Absent }

        optionalArgs =
            [ Argument.optional "background" filledInOptionals.background Encode.string, Argument.optional "volunteering" filledInOptionals.volunteering Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateChampionProfessionalCareer" (optionalArgs ++ [ Argument.required "id" requiredArgs.id Encode.string, Argument.required "proExperiences" requiredArgs.proExperiences (Aisf.InputObject.encodeProExperienceParams |> Encode.list) ]) object_ (identity >> Decode.nullable)


type alias UpdateChampionSportCareerOptionalArguments =
    { bestMemory : OptionalArgument String
    , decoration : OptionalArgument String
    , olympicGamesParticipation : OptionalArgument String
    , trackRecord : OptionalArgument String
    , worldCupParticipation : OptionalArgument String
    }


type alias UpdateChampionSportCareerRequiredArguments =
    { id : String
    , yearsInFrenchTeam : List Int
    }


updateChampionSportCareer : (UpdateChampionSportCareerOptionalArguments -> UpdateChampionSportCareerOptionalArguments) -> UpdateChampionSportCareerRequiredArguments -> SelectionSet decodesTo Aisf.Object.Champion -> SelectionSet (Maybe decodesTo) RootMutation
updateChampionSportCareer fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { bestMemory = Absent, decoration = Absent, olympicGamesParticipation = Absent, trackRecord = Absent, worldCupParticipation = Absent }

        optionalArgs =
            [ Argument.optional "bestMemory" filledInOptionals.bestMemory Encode.string, Argument.optional "decoration" filledInOptionals.decoration Encode.string, Argument.optional "olympicGamesParticipation" filledInOptionals.olympicGamesParticipation Encode.string, Argument.optional "trackRecord" filledInOptionals.trackRecord Encode.string, Argument.optional "worldCupParticipation" filledInOptionals.worldCupParticipation Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateChampionSportCareer" (optionalArgs ++ [ Argument.required "id" requiredArgs.id Encode.string, Argument.required "yearsInFrenchTeam" requiredArgs.yearsInFrenchTeam (Encode.int |> Encode.list) ]) object_ (identity >> Decode.nullable)
