-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Aisf.InputObject exposing (FileParams, FileParamsOptionalFields, FileParamsRequiredFields, MedalParams, MedalParamsRequiredFields, ProExperienceParams, ProExperienceParamsRequiredFields, buildFileParams, buildMedalParams, buildProExperienceParams, encodeFileParams, encodeMedalParams, encodeProExperienceParams)

import Aisf.Interface
import Aisf.Object
import Aisf.Scalar
import Aisf.ScalarCodecs
import Aisf.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildFileParams : FileParamsRequiredFields -> (FileParamsOptionalFields -> FileParamsOptionalFields) -> FileParams
buildFileParams required fillOptionals =
    let
        optionals =
            fillOptionals
                { base64 = Absent }
    in
    { base64 = optionals.base64, filename = required.filename }


type alias FileParamsRequiredFields =
    { filename : String }


type alias FileParamsOptionalFields =
    { base64 : OptionalArgument String }


{-| Type for the FileParams input object.
-}
type alias FileParams =
    { base64 : OptionalArgument String
    , filename : String
    }


{-| Encode a FileParams into a value that can be used as an argument.
-}
encodeFileParams : FileParams -> Value
encodeFileParams input =
    Encode.maybeObject
        [ ( "base64", Encode.string |> Encode.optional input.base64 ), ( "filename", Encode.string input.filename |> Just ) ]


buildMedalParams : MedalParamsRequiredFields -> MedalParams
buildMedalParams required =
    { competition = required.competition, id = required.id, medalType = required.medalType, specialty = required.specialty, year = required.year }


type alias MedalParamsRequiredFields =
    { competition : String
    , id : String
    , medalType : Int
    , specialty : String
    , year : Int
    }


{-| Type for the MedalParams input object.
-}
type alias MedalParams =
    { competition : String
    , id : String
    , medalType : Int
    , specialty : String
    , year : Int
    }


{-| Encode a MedalParams into a value that can be used as an argument.
-}
encodeMedalParams : MedalParams -> Value
encodeMedalParams input =
    Encode.maybeObject
        [ ( "competition", Encode.string input.competition |> Just ), ( "id", Encode.string input.id |> Just ), ( "medalType", Encode.int input.medalType |> Just ), ( "specialty", Encode.string input.specialty |> Just ), ( "year", Encode.int input.year |> Just ) ]


buildProExperienceParams : ProExperienceParamsRequiredFields -> ProExperienceParams
buildProExperienceParams required =
    { companyName = required.companyName, contact = required.contact, description = required.description, id = required.id, sectors = required.sectors, title = required.title, website = required.website }


type alias ProExperienceParamsRequiredFields =
    { companyName : String
    , contact : String
    , description : String
    , id : String
    , sectors : List String
    , title : String
    , website : String
    }


{-| Type for the ProExperienceParams input object.
-}
type alias ProExperienceParams =
    { companyName : String
    , contact : String
    , description : String
    , id : String
    , sectors : List String
    , title : String
    , website : String
    }


{-| Encode a ProExperienceParams into a value that can be used as an argument.
-}
encodeProExperienceParams : ProExperienceParams -> Value
encodeProExperienceParams input =
    Encode.maybeObject
        [ ( "companyName", Encode.string input.companyName |> Just ), ( "contact", Encode.string input.contact |> Just ), ( "description", Encode.string input.description |> Just ), ( "id", Encode.string input.id |> Just ), ( "sectors", (Encode.string |> Encode.list) input.sectors |> Just ), ( "title", Encode.string input.title |> Just ), ( "website", Encode.string input.website |> Just ) ]
