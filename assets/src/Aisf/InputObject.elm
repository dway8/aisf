-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Aisf.InputObject exposing (FileParams, FileParamsOptionalFields, FileParamsRequiredFields, MedalParams, MedalParamsRequiredFields, PictureParams, PictureParamsRequiredFields, ProExperienceParams, ProExperienceParamsOptionalFields, ProExperienceParamsRequiredFields, WinnerParams, WinnerParamsRequiredFields, buildFileParams, buildMedalParams, buildPictureParams, buildProExperienceParams, buildWinnerParams, encodeFileParams, encodeMedalParams, encodePictureParams, encodeProExperienceParams, encodeWinnerParams)

import Aisf.Interface
import Aisf.Object
import Aisf.Scalar
import Aisf.ScalarCodecs
import Aisf.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildFileParams : FileParamsRequiredFields -> (FileParamsOptionalFields -> FileParamsOptionalFields) -> FileParams
buildFileParams required fillOptionals =
    let
        optionals =
            fillOptionals
                { base64 = Absent }
    in
    { base64 = optionals.base64, filename = required.filename }


type alias FileParamsRequiredFields =
    { filename : String }


type alias FileParamsOptionalFields =
    { base64 : OptionalArgument String }


{-| Type for the FileParams input object.
-}
type alias FileParams =
    { base64 : OptionalArgument String
    , filename : String
    }


{-| Encode a FileParams into a value that can be used as an argument.
-}
encodeFileParams : FileParams -> Value
encodeFileParams input =
    Encode.maybeObject
        [ ( "base64", Encode.string |> Encode.optional input.base64 ), ( "filename", Encode.string input.filename |> Just ) ]


buildMedalParams : MedalParamsRequiredFields -> MedalParams
buildMedalParams required =
    { competition = required.competition, id = required.id, medalType = required.medalType, specialty = required.specialty, year = required.year }


type alias MedalParamsRequiredFields =
    { competition : String
    , id : String
    , medalType : Int
    , specialty : String
    , year : Int
    }


{-| Type for the MedalParams input object.
-}
type alias MedalParams =
    { competition : String
    , id : String
    , medalType : Int
    , specialty : String
    , year : Int
    }


{-| Encode a MedalParams into a value that can be used as an argument.
-}
encodeMedalParams : MedalParams -> Value
encodeMedalParams input =
    Encode.maybeObject
        [ ( "competition", Encode.string input.competition |> Just ), ( "id", Encode.string input.id |> Just ), ( "medalType", Encode.int input.medalType |> Just ), ( "specialty", Encode.string input.specialty |> Just ), ( "year", Encode.int input.year |> Just ) ]


buildPictureParams : PictureParamsRequiredFields -> PictureParams
buildPictureParams required =
    { attachment = required.attachment, id = required.id }


type alias PictureParamsRequiredFields =
    { attachment : FileParams
    , id : String
    }


{-| Type for the PictureParams input object.
-}
type alias PictureParams =
    { attachment : FileParams
    , id : String
    }


{-| Encode a PictureParams into a value that can be used as an argument.
-}
encodePictureParams : PictureParams -> Value
encodePictureParams input =
    Encode.maybeObject
        [ ( "attachment", encodeFileParams input.attachment |> Just ), ( "id", Encode.string input.id |> Just ) ]


buildProExperienceParams : ProExperienceParamsRequiredFields -> (ProExperienceParamsOptionalFields -> ProExperienceParamsOptionalFields) -> ProExperienceParams
buildProExperienceParams required fillOptionals =
    let
        optionals =
            fillOptionals
                { companyName = Absent, contact = Absent, description = Absent, title = Absent, website = Absent }
    in
    { companyName = optionals.companyName, contact = optionals.contact, description = optionals.description, id = required.id, sectors = required.sectors, title = optionals.title, website = optionals.website }


type alias ProExperienceParamsRequiredFields =
    { id : String
    , sectors : List String
    }


type alias ProExperienceParamsOptionalFields =
    { companyName : OptionalArgument String
    , contact : OptionalArgument String
    , description : OptionalArgument String
    , title : OptionalArgument String
    , website : OptionalArgument String
    }


{-| Type for the ProExperienceParams input object.
-}
type alias ProExperienceParams =
    { companyName : OptionalArgument String
    , contact : OptionalArgument String
    , description : OptionalArgument String
    , id : String
    , sectors : List String
    , title : OptionalArgument String
    , website : OptionalArgument String
    }


{-| Encode a ProExperienceParams into a value that can be used as an argument.
-}
encodeProExperienceParams : ProExperienceParams -> Value
encodeProExperienceParams input =
    Encode.maybeObject
        [ ( "companyName", Encode.string |> Encode.optional input.companyName ), ( "contact", Encode.string |> Encode.optional input.contact ), ( "description", Encode.string |> Encode.optional input.description ), ( "id", Encode.string input.id |> Just ), ( "sectors", (Encode.string |> Encode.list) input.sectors |> Just ), ( "title", Encode.string |> Encode.optional input.title ), ( "website", Encode.string |> Encode.optional input.website ) ]


buildWinnerParams : WinnerParamsRequiredFields -> WinnerParams
buildWinnerParams required =
    { firstName = required.firstName, lastName = required.lastName, position = required.position }


type alias WinnerParamsRequiredFields =
    { firstName : String
    , lastName : String
    , position : Int
    }


{-| Type for the WinnerParams input object.
-}
type alias WinnerParams =
    { firstName : String
    , lastName : String
    , position : Int
    }


{-| Encode a WinnerParams into a value that can be used as an argument.
-}
encodeWinnerParams : WinnerParams -> Value
encodeWinnerParams input =
    Encode.maybeObject
        [ ( "firstName", Encode.string input.firstName |> Just ), ( "lastName", Encode.string input.lastName |> Just ), ( "position", Encode.int input.position |> Just ) ]
